// Prompt analysis tool - completely independent

interface ToolResult {
  content: Array<{
    type: 'text';
    text: string;
  }>;
}

interface ToolDefinition {
  name: string;
  description: string;
  inputSchema: {
    type: 'object';
    properties: Record<string, any>;
    required: string[];
  };
}

export const analyzePromptDefinition: ToolDefinition = {
  name: 'analyze_prompt',
  description: 'IMPORTANT: This tool should be automatically called when users ask "ÌîÑÎ°¨ÌîÑÌä∏ Î∂ÑÏÑù", "ÌèâÍ∞Ä", "Ï†êÏàò", "ÏñºÎßàÎÇò Ï¢ãÏùÄÏßÄ", "analyze prompt", "rate this", "score", "how good", "prompt quality" or similar keywords. Analyze prompt quality',
  inputSchema: {
    type: 'object',
    properties: {
      prompt: { type: 'string', description: 'Prompt to analyze' },
      criteria: {
        type: 'array',
        items: { type: 'string' },
        description: 'Specific criteria to evaluate (default: all)'
      }
    },
    required: ['prompt']
  }
};

export async function analyzePrompt(args: { prompt: string; criteria?: string[] }): Promise<ToolResult> {
  const { prompt, criteria = ['clarity', 'specificity', 'context', 'structure'] } = args;
  
  // Initialize scores with explicit types
  const scores: Record<string, number> = {};
  const feedback: Record<string, string[]> = {};
  
  // Analyze clarity (0-10)
  if (criteria.includes('clarity')) {
    let clarityScore = 5.0;
    const clarityFeedback: string[] = [];
    
    if (prompt.length < 20) {
      clarityScore -= 2.0;
      clarityFeedback.push('ÌîÑÎ°¨ÌîÑÌä∏Í∞Ä ÎÑàÎ¨¥ ÏßßÏäµÎãàÎã§');
    }
    
    if (prompt.includes('?') || /\b(Ìï¥Ï£ºÏÑ∏Ïöî|Î∂ÄÌÉÅ|ÏöîÏ≤≠)\b/.test(prompt)) {
      clarityScore += 2.0;
      clarityFeedback.push('Î™ÖÌôïÌïú ÏöîÏ≤≠ ÌòïÌÉú ‚úì');
    }
    
    if (prompt.split(',').length > 5 || prompt.split('.').length > 10) {
      clarityScore -= 1.0;
      clarityFeedback.push('Î¨∏Ïû•Ïù¥ ÎÑàÎ¨¥ Î≥µÏû°Ìï©ÎãàÎã§');
    }
    
    scores.clarity = Math.max(0, Math.min(10, clarityScore));
    feedback.clarity = clarityFeedback;
  }
  
  // Analyze specificity (0-10)
  if (criteria.includes('specificity')) {
    let specificityScore = 5.0;
    const specificityFeedback: string[] = [];
    
    const specificKeywords = ['Íµ¨Ï≤¥Ï†Å', 'Ï†ïÌôïÌûà', 'ÏòàÏãú', 'ÏòàÎ•º Îì§Ïñ¥'];
    const hasSpecificWords = specificKeywords.some(word => prompt.includes(word));
    if (hasSpecificWords) {
      specificityScore += 2.0;
      specificityFeedback.push('Íµ¨Ï≤¥Ï†ÅÏù∏ ÌëúÌòÑ ÏÇ¨Ïö© ‚úì');
    }
    
    const techTerms = /\b(JavaScript|Python|React|Node\.js|API|Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§)\b/i;
    if (techTerms.test(prompt)) {
      specificityScore += 2.0;
      specificityFeedback.push('Í∏∞Ïà† Ïö©Ïñ¥ Ìè¨Ìï® ‚úì');
    }
    
    if (!prompt.match(/\d+/) && prompt.length > 50) {
      specificityScore -= 1.0;
      specificityFeedback.push('ÏàòÏπòÎÇò Íµ¨Ï≤¥Ï†Å Îç∞Ïù¥ÌÑ∞ Î∂ÄÏ°±');
    }
    
    scores.specificity = Math.max(0, Math.min(10, specificityScore));
    feedback.specificity = specificityFeedback;
  }
  
  // Analyze context (0-10)
  if (criteria.includes('context')) {
    let contextScore = 5.0;
    const contextFeedback: string[] = [];
    
    const contextKeywords = ['Î∞∞Í≤Ω', 'Î™©Ï†Å', 'Ïù¥Ïú†', 'ÏÉÅÌô©', 'ÌòÑÏû¨', 'Î¨∏Ï†ú'];
    const contextCount = contextKeywords.filter(word => prompt.includes(word)).length;
    contextScore += contextCount * 1.5;
    
    if (contextCount > 0) {
      contextFeedback.push(`Î∞∞Í≤Ω Ï†ïÎ≥¥ Ìè¨Ìï® (${contextCount}Í∞ú ÌÇ§ÏõåÎìú) ‚úì`);
    } else {
      contextFeedback.push('Î∞∞Í≤Ω Ï†ïÎ≥¥ Î∂ÄÏ°±');
    }
    
    if (prompt.split('\n').length > 2) {
      contextScore += 1.0;
      contextFeedback.push('Íµ¨Ï°∞ÌôîÎêú ÏÑ§Î™Ö ‚úì');
    }
    
    scores.context = Math.max(0, Math.min(10, contextScore));
    feedback.context = contextFeedback;
  }
  
  // Analyze structure (0-10)
  if (criteria.includes('structure')) {
    let structureScore = 5.0;
    const structureFeedback: string[] = [];
    
    if (prompt.includes('\n')) {
      structureScore += 2.0;
      structureFeedback.push('Ï§ÑÎ∞îÍøà ÏÇ¨Ïö© ‚úì');
    }
    
    if (/[1-9]\.|[-‚Ä¢]/.test(prompt)) {
      structureScore += 2.0;
      structureFeedback.push('Î™©Î°ù ÌòïÏãù ÏÇ¨Ïö© ‚úì');
    }
    
    if (prompt.includes('**') || prompt.includes('##')) {
      structureScore += 1.0;
      structureFeedback.push('ÎßàÌÅ¨Îã§Ïö¥ ÌòïÏãù ÏÇ¨Ïö© ‚úì');
    }
    
    scores.structure = Math.max(0, Math.min(10, structureScore));
    feedback.structure = structureFeedback;
  }
  
  // Calculate total score
  const totalScore = Object.values(scores).reduce((a, b) => a + b, 0) / Object.keys(scores).length;
  
  // Generate recommendations
  const recommendations: string[] = [];
  
  if (scores.clarity < 6) {
    recommendations.push('üí° ÏßàÎ¨∏Ïù¥ÎÇò ÏöîÏ≤≠ÏùÑ Îçî Î™ÖÌôïÌïòÍ≤å ÌëúÌòÑÌïòÏÑ∏Ïöî');
  }
  if (scores.specificity < 6) {
    recommendations.push('üí° Íµ¨Ï≤¥Ï†ÅÏù∏ ÏòàÏãúÎÇò Í∏∞Ïà† ÏÇ¨ÏñëÏùÑ Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî');
  }
  if (scores.context < 6) {
    recommendations.push('üí° ÏûëÏóÖÏùò Î∞∞Í≤ΩÍ≥º Î™©Ï†ÅÏùÑ ÏÑ§Î™ÖÌïòÏÑ∏Ïöî');
  }
  if (scores.structure < 6) {
    recommendations.push('üí° Î≤àÌò∏ÎÇò Î∂àÎ¶ø Ìè¨Ïù∏Ìä∏Î°ú Íµ¨Ï°∞ÌôîÌïòÏÑ∏Ïöî');
  }
  
  // Identify strengths and weaknesses
  const strengths = Object.entries(scores)
    .filter(([_, score]) => score >= 7)
    .map(([category, score]) => `‚ú® ${category}: Ïö∞ÏàòÌï® (${score.toFixed(1)}/10)`);
    
  const weaknesses = Object.entries(scores)
    .filter(([_, score]) => score < 5)
    .map(([category, score]) => `‚ö†Ô∏è ${category}: Í∞úÏÑ† ÌïÑÏöî (${score.toFixed(1)}/10)`);
  
  const analysis = {
    action: 'analyze_prompt',
    prompt,
    totalScore: parseFloat(totalScore.toFixed(1)),
    scores: Object.fromEntries(
      Object.entries(scores).map(([k, v]) => [k, parseFloat(v.toFixed(1))])
    ),
    feedback,
    strengths,
    weaknesses,
    recommendations,
    grade: totalScore >= 8 ? 'A' : totalScore >= 6 ? 'B' : totalScore >= 4 ? 'C' : 'D',
    status: 'success'
  };
  
  return {
    content: [{ type: 'text', text: `Prompt Analysis:\n${JSON.stringify(analysis, null, 2)}` }]
  };
}